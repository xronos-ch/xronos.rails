<!-- https://codepen.io/anon/pen/GbRzoL -->
<div class="burger_menu active">

  <button class="burger_nav-tgl" type="button" aria-label="toggle burger_menu">
    <!-- this span just for the three dividers in the hamburger button-->
		<span aria-hidden="true"></span>
  </button>

  <nav class="burger_nav">

		<!-- https://www.w3schools.com/css/tryit.asp?filename=trycss_dropdown_navbar -->
		<div id="content">

			<!-- #### Menu #### -->		
      <nav id="nav">
        <a href="#page1">Page 1</a>
        <a href="#page2">Page 2</a>
        <a href="#page3">Page 3</a>
        <a href="#page4">Page 4</a>
        <a href="#page5">Page 5</a>
      </nav>

			<!-- #### Pages #### -->
      <main>
        <div id="page2" class="page">
          <h1>Page 2</h1>
          <p>And this is the second page!</p>
        </div>
        <div id="page3" class="page">
          <h1>Page 3</h1>
          <p>Okay... This is the third page...</p>
        </div>
        <div id="page4" class="page">
          <h1>Page 4</h1>
          <p>Uhh... Fourth page?</p>
        </div>
        <div id="page5" class="page">
          <h1>Page 5</h1>
          <p>Still here? Fine, fifth page...</p>
        </div>
        <div id="page1" class="page default">
          <h1>Page 1</h1>
          <p>This is the first page!</p>
        </div>
      </main>

  </nav>

</div>

<script>
{	
	const burger_menu = document.querySelector(".burger_menu");
	const btn = burger_menu.querySelector(".burger_nav-tgl");
	btn.addEventListener("click", evt => {
		if (burger_menu.className.indexOf("active") === -1) {
			burger_menu.classList.add("active");
		} else {
			burger_menu.classList.remove("active");
		}
	});
}
</script>

<div id = "controls">

	<div id="controlsheader"><h1>Xronos</h1></div>

	<div id="controlsbody">
		<%= form_tag({controller: "welcome", action: "index"}, method: "get") do %>
  		<%= label_tag(:query_site_name, "Site name:") %>
  		<%= text_field_tag(:query_site_name, (params[:query_site_name] or "")) %>
      <%= label_tag(:query_lat_start, "Lat min:") %>
      <%= number_field_tag(:query_lat_start, (params[:query_lat_start] or ""), in: (-100..100).to_a) %>
      <%= label_tag(:query_lat_stop, "Lat max:") %>
      <%= number_field_tag(:query_lat_stop, (params[:query_lat_stop] or ""), in: (-100..100).to_a) %>
			<br><br>
  		<%= submit_tag("Search") %>
	<% end %>

	</div>

</div>

<!-- #### Background map #### -->
<%= map(
	:center => {
	  :latlng => [45, 8],
	  :zoom => 3
	},
	:markers => @selected_measurements.all.map {
    |selected_measurements| { 
      latlng: [selected_measurements.site_lat, selected_measurements.site_lng], popup: selected_measurements.site_name 
    } 
  }
) %>

<script>
	//Make the DIV element draggagle:
	dragElement(document.getElementById("controls"));

	function dragElement(elmnt) {
		var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
		if (document.getElementById("controlsheader")) {
		  /* if present, the header is where you move the DIV from:*/
		  document.getElementById("controlsheader").onmousedown = dragMouseDown;
		} else {
		  /* otherwise, move the DIV from anywhere inside the DIV:*/
		  elmnt.onmousedown = dragMouseDown;
		}

		function dragMouseDown(e) {
		  e = e || window.event;
		  e.preventDefault();
		  // get the mouse cursor position at startup:
		  pos3 = e.clientX;
		  pos4 = e.clientY;
		  document.onmouseup = closeDragElement;
		  // call a function whenever the cursor moves:
		  document.onmousemove = elementDrag;
		}

		function elementDrag(e) {
		  e = e || window.event;
		  e.preventDefault();
		  // calculate the new cursor position:
		  pos1 = pos3 - e.clientX;
		  pos2 = pos4 - e.clientY;
		  pos3 = e.clientX;
		  pos4 = e.clientY;
		  // set the element's new position:
		  elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
		  elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
		}

		function closeDragElement() {
		  /* stop moving when mouse button is released:*/
		  document.onmouseup = null;
		  document.onmousemove = null;
		}
	}
</script>
